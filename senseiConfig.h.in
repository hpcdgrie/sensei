#ifndef senseiConfig_h
#define senseiConfig_h

#define SENSEI_VERSION "@SENSEI_VERSION@"
#define SENSEI_VERSION_MAJOR @SENSEI_VERSION_MAJOR@
#define SENSEI_VERSION_MINOR @SENSEI_VERSION_MINOR@
#define SENSEI_VERSION_PATCH @SENSEI_VERSION_PATCH@

#cmakedefine ENABLE_SENSEI
#cmakedefine ENABLE_CUDA
#cmakedefine ENABLE_PYTHON
#cmakedefine ENABLE_CATALYST
#cmakedefine ENABLE_CATALYST_PYTHON
#cmakedefine ENABLE_LIBSIM
#cmakedefine ENABLE_VISTLE
#cmakedefine ENABLE_ADIOS1
#cmakedefine ENABLE_ADIOS2
#cmakedefine ENABLE_HDF5
#cmakedefine ENABLE_CONDUIT
#cmakedefine ENABLE_ASCENT
#cmakedefine ENABLE_VTK_MPI
#cmakedefine ENABLE_VTK_IO
#cmakedefine ENABLE_VTK_RENDERING
#cmakedefine ENABLE_VTK_ACCELERATORS
#cmakedefine ENABLE_VTK_FILTERS
#cmakedefine ENABLE_VTKM
#cmakedefine ENABLE_PROFILER

#cmakedefine SENSEI_PYTHON_VERSION @SENSEI_PYTHON_VERSION@

#ifdef __cplusplus
// hide some differences betweem VisIt's VTK and more modern versions
#include <vtkSetGet.h>
#if defined(ENABLE_LIBSIM)
#include <vtkVersionMacros.h>
#if VTK_MAJOR_VERSION < 7
#define senseiBaseTypeMacro(a1, a2) vtkTypeMacro(a1, a2)
#else
#define senseiBaseTypeMacro(a1, a2) vtkBaseTypeMacro(a1, a2)
#endif
#define senseiTypeMacro(a1, a2) vtkTypeMacro(a1, a2)
#define senseiNewMacro(a1) \
a1 *a1::New() \
{ \
 vtkObjectBase* ret = vtkObjectFactory::CreateInstance(#a1); \
   if(ret) \
     { \
     return static_cast<a1*>(ret); \
     } \
   return new a1; \
}
#else
#define senseiBaseTypeMacro(a1, a2) vtkBaseTypeMacro(a1, a2)
#define senseiTypeMacro(a1, a2) vtkTypeMacro(a1, a2)
#define senseiNewMacro(thisClass) \
  thisClass* thisClass::New() \
  { \
  auto result = new thisClass; \
  result->InitializeObjectBase(); \
  return result; \
  }
#endif
#endif

#endif
